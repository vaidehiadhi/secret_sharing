const fs = require('fs');

// Function to read and parse a JSON file
function readTestCase(filename) {
    try {
        const data = fs.readFileSync(filename, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error(`Error reading file ${filename}:`, error.message);
        process.exit(1);
    }
}

// Function to decode a value from given base to decimal
function decodeValue(value, base) {
    return BigInt (parseInt(value, parseInt(base)));
}

// Function to extract points from the test case
function extractPoints(testCase) {
    const points = [];
    const { keys, ...rest } = testCase;
    for (const [x, data] of Object.entries(rest)) {
        if (x !== 'keys') {
            const y = decodeValue(data.value, data.base);
            points.push([parseInt(x), y]);
        }
    }
    return points;
}

// Lagrange interpolation function
function lagrangeInterpolation(points, x) {
    let result = 0;
    for (let i = 0; i < points.length; i++) {
        let term = points[i][1];
        for (let j = 0; j < points.length; j++) {
            if (i !== j) {
                term *= (x - points[j][0]) / (points[i][0] - points[j][0]);
            }
        }
        result += term;
    }
    return result;
}

// Function to find the secret (constant term) from the test case
function findSecret(testCase) {
    const points = extractPoints(testCase);
    const k = testCase.keys.k;
    if (points.length < k) {
        throw new Error(`Not enough points provided. Need at least ${k} points.`);
    }
    return Math.round(lagrangeInterpolation(points.slice(0, k), 0));
}

// Main execution
try {
    const testCase1 = readTestCase('testcase1.json');
    const testCase2 = readTestCase('testcase2.json');

    console.log("Secret for Test Case 1:", findSecret(testCase1));
    console.log("Secret for Test Case 2:", findSecret(testCase2));
} catch (error) {
    console.error("An error occurred:", error.message);
}